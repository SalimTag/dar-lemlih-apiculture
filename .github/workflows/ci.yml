name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-test:
    name: API (Spring Boot)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: darlemlih_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Temurin JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests
      working-directory: ./apps/api
      run: ./mvnw clean test -B
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/darlemlih_test
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: rootpass
    
    - name: Build JAR
      working-directory: ./apps/api
      run: ./mvnw package -B -DskipTests

  frontend-test:
    name: Web (React + Vite)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: apps/web
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
    
    - name: Install dependencies
      run: npm ci || npm install
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run tests (if present)
      run: npm run test --if-present -- --run || true
    
    - name: Build frontend
      run: npm run build

  docker-build:
    name: Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: ${{ success() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API Docker image
      run: docker build -t darlemlih/api:latest -f infra/docker/Dockerfile.api apps/api
    
    - name: Build Web Docker image
      run: docker build -t darlemlih/web:latest -f infra/docker/Dockerfile.web apps/web
    
    # Optional: Push to Docker Hub if secrets are configured
    - name: Login to Docker Hub
      if: ${{ secrets.DOCKERHUB_USER && secrets.DOCKERHUB_TOKEN }}
      run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin
    
    - name: Tag & Push Images
      if: ${{ secrets.DOCKERHUB_USER && secrets.DOCKERHUB_TOKEN }}
      run: |
        docker tag darlemlih/api:latest ${{ secrets.DOCKERHUB_USER }}/darlemlih-api:latest
        docker tag darlemlih/web:latest ${{ secrets.DOCKERHUB_USER }}/darlemlih-web:latest
        docker push ${{ secrets.DOCKERHUB_USER }}/darlemlih-api:latest
        docker push ${{ secrets.DOCKERHUB_USER }}/darlemlih-web:latest
